<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.springboot.demo.Dao.MajorMapper">
  <resultMap id="BaseResultMap" type="com.springboot.demo.Entity.Major">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="description" jdbcType="VARCHAR" property="description" />
    <result column="collegeId" jdbcType="INTEGER" property="collegeId" />
  </resultMap>
  <sql id="Base_Column_List">
    id, name, description, collegeId
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
        m.id,
        m.name,
        m.description,
        m.collegeId,
        co.name as collegeName
    from major as m
    LEFT JOIN college as co on co.id = m.collegeId
    where m.id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from major
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.springboot.demo.Entity.Major">
    insert into major (id, name, description, 
      collegeId)
    values (#{id,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{description,jdbcType=VARCHAR}, 
      #{collegeId,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.springboot.demo.Entity.Major">
    insert into major
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="description != null">
        description,
      </if>
      <if test="collegeId != null">
        collegeId,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="description != null">
        #{description,jdbcType=VARCHAR},
      </if>
      <if test="collegeId != null">
        #{collegeId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.springboot.demo.Entity.Major">
    update major
    <set>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="description != null">
        description = #{description,jdbcType=VARCHAR},
      </if>
      <if test="collegeId != null">
        collegeId = #{collegeId,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.springboot.demo.Entity.Major">
    update major
    set name = #{name,jdbcType=VARCHAR},
      description = #{description,jdbcType=VARCHAR},
      collegeId = #{collegeId,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <select id="getTotalCount" parameterType="java.util.Map" resultType="java.lang.Integer">
    select
    count(1)
    from major as m
    LEFT JOIN college as co on co.id = m.collegeId
    where 1=1
    <if test="keyword!=null and keyword !=''">
      and m.name LIKE '%${keyword}%'
    </if>
    <if test="collegeId !='null' and collegeId !='' ">
      and m.collegeId = #{collegeId}
    </if>
  </select>

  <select id="getAllMajor" parameterType="java.util.Map" resultMap="BaseResultMap">
    select
           m.id,
           m.name,
           m.description,
           m.collegeId,
           co.name as collegeName
    from major as m
    LEFT JOIN college as co on co.id = m.collegeId
    where 1=1
    <if test="keyword!=null and keyword !=''">
      and m.name LIKE '%${keyword}%'
    </if>
    <if test="collegeId !='null' and collegeId !='' ">
      and m.collegeId = #{collegeId}
    </if>
    limit ${before},${pageSize}
  </select>

</mapper>