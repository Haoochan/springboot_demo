<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.springboot.demo.Dao.NoticeMapper">
  <resultMap id="BaseResultMap" type="com.springboot.demo.Entity.Notice">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="title" jdbcType="VARCHAR" property="title" />
    <result column="time" jdbcType="TIMESTAMP" property="time" />
    <result column="categoryId" jdbcType="INTEGER" property="categoryId" />
    <result column="userId" jdbcType="INTEGER" property="userId" />
    <result column="collegeId" jdbcType="INTEGER" property="collegeId" />
    <result column="majorId" jdbcType="INTEGER" property="majorId" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.springboot.demo.Entity.Notice">
    <result column="content" jdbcType="LONGVARCHAR" property="content" />
  </resultMap>
  <sql id="Base_Column_List">
    id, title, time,categoryId, userId, collegeId, majorId
  </sql>
  <sql id="Blob_Column_List">
    content
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select
      n.id as id,
      n.title as title,
      n.content as content,
      n.time as time,
      n.categoryId as categoryId,
      nc.`name` as category,
      n.userId as userId,
      u.`name` as user,
      n.collegeId as collegeId,
      c.`name` as college,
      n.majorId as majorId,
      m.`name` as major
    from notice as n
           LEFT JOIN notice_category as nc on nc.id=n.categoryId
           LEFT JOIN `user` as u on u.id = n.userId
           LEFT JOIN college as c on c.id = n.collegeId
           LEFT JOIN major as m on m.id = n.majorId
    where n.id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from notice
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.springboot.demo.Entity.Notice">
    insert into notice (id, title, time,categoryId,
      userId, collegeId, majorId, 
      content)
    values (#{id,jdbcType=INTEGER}, #{title,jdbcType=VARCHAR}, #{time,jdbcType=TIMESTAMP}, #{categoryId,jdbcType=INTEGER},
      #{userId,jdbcType=INTEGER}, #{collegeId,jdbcType=INTEGER}, #{majorId,jdbcType=INTEGER}, 
      #{content,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.springboot.demo.Entity.Notice">
    insert into notice
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="title != null">
        title,
      </if>
      <if test="time != null">
        time,
      </if>
      <if test="categoryId != null">
        categoryId,
      </if>
      <if test="userId != null">
        userId,
      </if>
      <if test="collegeId != null">
        collegeId,
      </if>
      <if test="majorId != null">
        majorId,
      </if>
      <if test="content != null">
        content,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="title != null">
        #{title,jdbcType=VARCHAR},
      </if>
      <if test="time != null">
        #{time,jdbcType=TIMESTAMP},
      </if>
      <if test="categoryId != null">
        #{categoryId,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="collegeId != null">
        #{collegeId,jdbcType=INTEGER},
      </if>
      <if test="majorId != null">
        #{majorId,jdbcType=INTEGER},
      </if>
      <if test="content != null">
        #{content,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.springboot.demo.Entity.Notice">
    update notice
    <set>
      <if test="title != null">
        title = #{title,jdbcType=VARCHAR},
      </if>
      <if test="time != null">
        time = #{time,jdbcType=TIMESTAMP},
      </if>
      <if test="categoryId != null">
        categoryId = #{categoryId,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        userId = #{userId,jdbcType=INTEGER},
      </if>
      <if test="collegeId != null">
        collegeId = #{collegeId,jdbcType=INTEGER},
      </if>
      <if test="majorId != null">
        majorId = #{majorId,jdbcType=INTEGER},
      </if>
      <if test="content != null">
        content = #{content,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.springboot.demo.Entity.Notice">
    update notice
    set title = #{title,jdbcType=VARCHAR},
      time = #{time,jdbcType=TIMESTAMP},
      categoryId = #{categoryId,jdbcType=INTEGER},
      userId = #{userId,jdbcType=INTEGER},
      collegeId = #{collegeId,jdbcType=INTEGER},
      majorId = #{majorId,jdbcType=INTEGER},
      content = #{content,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.springboot.demo.Entity.Notice">
    update notice
    set title = #{title,jdbcType=VARCHAR},
      time = #{time,jdbcType=TIMESTAMP},
      categoryId = #{categoryId,jdbcType=INTEGER},
      userId = #{userId,jdbcType=INTEGER},
      collegeId = #{collegeId,jdbcType=INTEGER},
      majorId = #{majorId,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <select id="getTotalCount"  resultType="java.lang.Integer" >
    select
    count(1)
    from notice as n
    LEFT JOIN notice_category as nc on nc.id=n.categoryId
    LEFT JOIN `user` as u on u.id = n.userId
    LEFT JOIN college as c on c.id = n.collegeId
    LEFT JOIN major as m on m.id = n.majorId
    where 1=1
    <if test="keyword!=null and keyword !=''">
      and n.content LIKE '%${keyword}%'
    </if>
    <if test="categoryId !=null and categoryId !='' ">
      and n.categoryId = #{categoryId}
    </if>
    <if test="collegeId !=null and collegeId !='' ">
       and n.collegeId in (#{collegeId},24)
    </if>
    <if test="majorId !=null and majorId !='' ">
      and n.majorId in (#{majorId},5,0)
    </if>
  </select>

  <select id="getAllNotice"  resultMap="ResultMapWithBLOBs" parameterType="java.util.Map">
    select
    n.id as id,
    n.title as title,
    n.content as content,
    n.time as time,
    n.categoryId as categoryId,
    nc.`name` as category,
    n.userId as userId,
    u.`name` as user,
    n.collegeId as collegeId,
    c.`name` as college,
    n.majorId as majorId,
    m.`name` as major
    from notice as n
    LEFT JOIN notice_category as nc on nc.id=n.categoryId
    LEFT JOIN `user` as u on u.id = n.userId
    LEFT JOIN college as c on c.id = n.collegeId
    LEFT JOIN major as m on m.id = n.majorId
    where 1=1
    <if test="keyword!=null and keyword !=''">
      and n.content LIKE '%${keyword}%'
    </if>
    <if test="categoryId !=null and categoryId !='' ">
      and n.categoryId = #{categoryId}
    </if>
    <if test="collegeId !=null and collegeId !='' ">
        and n.collegeId in (#{collegeId},24)
    </if>
    <if test="majorId !=null and majorId !='' ">
        and n.majorId in (#{majorId},5,0)
    </if>
    limit ${before},${after}
  </select>


</mapper>