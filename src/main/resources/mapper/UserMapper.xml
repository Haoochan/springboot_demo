<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.springboot.demo.Dao.UserMapper">
  <resultMap id="BaseResultMap" type="com.springboot.demo.Entity.User">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="username" jdbcType="VARCHAR" property="username" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="role" jdbcType="VARCHAR" property="role" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="sex" jdbcType="VARCHAR" property="sex" />
    <result column="phone" jdbcType="INTEGER" property="phone" />
    <result column="email" jdbcType="VARCHAR" property="email" />
  </resultMap>
  <sql id="Base_Column_List">
    id, username, password, role, name,sex, phone, email
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select
      u.id,
      u.username,
      u.password,
      u.name,
      u.role,
      u.sex,
      u.phone,
      u.email,
      GROUP_CONCAT(c.id) as classesId,
      GROUP_CONCAT(c.name) as classes,
      m.name as major,
      m.id as majorId,
      co.name as college,
      co.id as collegeId
    from user as u
           LEFT JOIN user_class_college_map as uccm on uccm.userId=u.id
           LEFT JOIN class as c on uccm.classesId = c.id
           LEFT JOIN major as m on c.majorId = m.id
           LEFT JOIN college as co on uccm.collegeId = co.id
    where u.id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from user
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.springboot.demo.Entity.User">
    insert into user (id, username, password, 
      role,name,sex,phone,email)
    values (#{id,jdbcType=INTEGER}, #{username,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, 
      #{role,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, #{sex,jdbcType=VARCHAR}, #{phone,jdbcType=INTEGER}, #{email,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.springboot.demo.Entity.User">
    insert into user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="username != null">
        username,
      </if>
      <if test="password != null">
        password,
      </if>
      <if test="role != null">
        role,
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="sex != null">
        #{sex,jdbcType=VARCHAR},
      </if>
      <if test="phone != null">
        #{phone,jdbcType=INTEGER},
      </if>
      <if test="email != null">
        #{email,jdbcType=VARCHAR},
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="username != null">
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="role != null">
        #{role,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="sex != null">
        #{sex,jdbcType=VARCHAR},
      </if>
      <if test="phone != null">
        #{phone,jdbcType=INTEGER},
      </if>
      <if test="email != null">
        #{email,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.springboot.demo.Entity.User">
    update user
    <set>
      <if test="username != null">
        username = #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="role != null">
        role = #{role,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="sex != null">
        sex = #{sex,jdbcType=VARCHAR},
      </if>
      <if test="phone != null">
        phone = #{phone,jdbcType=INTEGER},
      </if>
      <if test="email != null">
        email = #{email,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.springboot.demo.Entity.User">
    update user
    set username = #{username,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      role = #{role,jdbcType=VARCHAR},
      name = #{name,jdbcType=VARCHAR},
      sex = #{sex,jdbcType=VARCHAR},
      phone = #{phone,jdbcType=INTEGER},
      email = #{email,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <!--登录查找用户-->
  <select id="selectByUsernameAndPassword" parameterType="java.lang.String" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from user
    where
         username = #{username,jdbcType=VARCHAR}
    and  password = #{password,jdbcType=VARCHAR}
    and  role = #{role,jdbcType=VARCHAR}
  </select>

  <!--获取总数-->
  <select id="getTotalCount" parameterType="java.util.Map" resultType="java.lang.Integer">
    select
    count(1)
    from user as u
    LEFT JOIN user_class_college_map as uccm on uccm.userId=u.id
    LEFT JOIN class as c on uccm.classesId = c.id
    LEFT JOIN major as m on c.majorId = m.id
    LEFT JOIN college as co on co.id = m.collegeId
    where 1=1
    <if test="keyword!=null and keyword !=''">
      and u.name LIKE '%${keyword}%'
    </if>
    <if test="role !=null and role !='' ">
      and u.role = #{role}
    </if>
    <if test="sex !=null and sex !='' ">
      and u.sex = #{sex}
    </if>
    <if test="college !=null and college !='' ">
      and m.collegeId = #{college}
    </if>
    <if test="major !=null and major !='' ">
      and c.majorId = #{major}
    </if>
    <if test="classes !=null and classes !='' ">
      and uccm.classesId = #{classes}
    </if>
  </select>

  <!--获取所有user-->
  <select id="getAllUser" parameterType="java.util.Map" resultMap="BaseResultMap">
    select
          u.id,
          u.username,
          u.password,
          u.name,
          u.role,
          u.sex,
          u.phone,
          u.email,
          GROUP_CONCAT(c.id) as classesId,
          GROUP_CONCAT(c.name) as classes,
          m.name as major,
          m.id as majorId,
          co.name as college,
          co.id as collegeId
    from user as u
    LEFT JOIN user_class_college_map as uccm on uccm.userId=u.id
    LEFT JOIN class as c on uccm.classesId = c.id
    LEFT JOIN major as m on c.majorId = m.id
    LEFT JOIN college as co on uccm.collegeId = co.id
    where 1=1
    <if test="keyword!=null and keyword !=''">
      and u.name LIKE '%${keyword}%'
    </if>
    <if test="role !=null and role !='' ">
      and u.role = #{role}
    </if>
    <if test="sex !=null and sex !='' ">
      and u.sex = #{sex}
    </if>
    <if test="college !=null and college !='' ">
      and m.collegeId = #{college}
    </if>
    <if test="major !=null and major !='' ">
      and c.majorId = #{major}
    </if>
    <if test="classes !=null and classes !='' ">
      and uccm.classesId = #{classes}
    </if>
    GROUP BY u.id
    limit ${before},${after}
  </select>

</mapper>